from Bio import SeqIO
from tqdm import tqdm
import numpy as np, matplotlib.pyplot as plt

filename = 'SourceFiles\hg38_chr1_and_chr2.fa'

seq = SeqIO.parse(filename, 'fasta')
for rec in seq:
    example = rec
    break

CPG_SIZE = 300
NON_CPG = np.array([[0.3271715869912977, 0.17247792812534388, 0.24443043150683844, 0.25592005337651996], 
                    [0.35167597953483576, 0.2579215677970476, 0.04602548647263419, 0.3443769661954824], 
                    [0.289574541578388, 0.20886930435445236, 0.2581334737104361, 0.2434226803567235], 
                    [0.21703463177331836, 0.20516397764376426, 0.24930069526755239, 0.328500695315365]])

CPG = np.array([[0.18833298467476906, 0.2733168226632566, 0.4261507419679189, 0.11219945069405549], 
                [0.15741096046687694, 0.3645942754532538, 0.2875059448583827, 0.19048881922148653], 
                [0.1619684499314129, 0.3519651696785352, 0.3647984135504264, 0.12126796683962546], 
                [0.08710125011673982, 0.3666230837991808, 0.3666230837991808, 0.1904893733406268]])
#целевые матрицы (МЦ)

nucList = ['A', 'C', 'G', 'T']

dict_nuc_cpg = {'A': {'A': 0,   'C': 0,    'G': 0,     'T': 0, 'N':0},
            'C': {'A': 0,   'C': 0,    'G': 0,     'T': 0, 'N':0},
            'G': {'A': 0,   'C': 0,    'G': 0,     'T': 0, 'N':0},
            'T': {'A': 0,   'C': 0,    'G': 0,     'T': 0, 'N':0},
            'N': {'N': 0, 'A': 0,   'C': 0,    'G': 0,     'T': 0}}

dict_nuc_noncpg =  {'A': {'A': 0,   'C': 0,    'G': 0,     'T': 0, 'N':0},
            'C': {'A': 0,   'C': 0,    'G': 0,     'T': 0, 'N':0},
            'G': {'A': 0,   'C': 0,    'G': 0,     'T': 0, 'N':0},
            'T': {'A': 0,   'C': 0,    'G': 0,     'T': 0, 'N':0},
            'N': {'N': 0, 'A': 0,   'C': 0,    'G': 0,     'T': 0}}

comparison = np.full((4,4), 0.0)

x = np.linspace(0, len(example.seq), len(example.seq)) 
yCpG = []
yNon = []

def MatrixInit (def_matrix, iter_num:int):
    for j in range(CPG_SIZE): #заполнение матрицы CpG первыми 300 нукл.
        def_matrix[example.seq[(j*iter_num)]][example.seq[(j*iter_num)+1]] += 1
        
    for k in range(4):
        sum_of_row = (def_matrix[nucList[k]]['A'] + 
                    def_matrix[nucList[k]]['C'] +
                    def_matrix[nucList[k]]['G'] + 
                    def_matrix[nucList[k]]['T'])
        for l in range(4):
            if sum_of_row != 0:
                comparison[k][l] = (CPG[k][l] - (def_matrix[nucList[k]][nucList[l]] / sum_of_row))**2
    return(-np.sum(comparison))

yCpG.append(MatrixInit(dict_nuc_cpg, 1))
yNon.append(MatrixInit(dict_nuc_noncpg, 1))

for i in tqdm(range(CPG_SIZE, len(example.seq)-1), leave=True): #scaner move (CpG comp)
    dict_nuc_cpg[example.seq[i-CPG_SIZE].upper()][example.seq[i-CPG_SIZE+1].upper()] -= 1
    dict_nuc_cpg[example.seq[i].upper()][example.seq[i+1].upper()] += 1
    for k in range(4):
        sum_of_row = (dict_nuc_cpg[nucList[k]]['A'] + 
                dict_nuc_cpg[nucList[k]]['C'] +
                dict_nuc_cpg[nucList[k]]['G'] + 
                dict_nuc_cpg[nucList[k]]['T'])
        for l in range(4):
            if sum_of_row != 0:
                comparison[k][l] = (CPG[k][l] - (dict_nuc_cpg[nucList[k]][nucList[l]] / sum_of_row))**2
    yCpG.append(-np.sum(comparison))

for i in tqdm(range(CPG_SIZE, len(example.seq)-1)): #scaner move (CpG comp)
    dict_nuc_noncpg[example.seq[i-CPG_SIZE]][example.seq[i-CPG_SIZE+1]] -= 1
    dict_nuc_noncpg[example.seq[i]][example.seq[i+1]] += 1
    for k in range(4):
        sum_of_row = (dict_nuc_noncpg[nucList[k]]['A'] + 
                dict_nuc_noncpg[nucList[k]]['C'] +
                dict_nuc_noncpg[nucList[k]]['G'] + 
                dict_nuc_noncpg[nucList[k]]['T'])
        for l in range(4):
            if sum_of_row != 0:
                comparison[k][l] = (NON_CPG[k][l] - (dict_nuc_noncpg[nucList[k]][nucList[l]] / sum_of_row))**2
    yNon.append(-np.sum(comparison))

dyn_row = []
dyn_row_coords = []
islands_list = []

for i in range(len(yCpG)-1):
    while yCpG[i] > yNon[i]:
        dyn_row.append(yCpG[i])
        i+=1
    
    
fig, ax = plt.subplots()
ax.plot(yCpG)
ax.plot(yNon)
plt.show()